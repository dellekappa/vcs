// Code generated by MockGen. DO NOT EDIT.
// Source: kms.go

// Package mocks is a generated GoMock package.
package mocks

import (
	x509 "crypto/x509"
	reflect "reflect"

	jwk "github.com/dellekappa/kcms-go/doc/jose/jwk"
	kms "github.com/dellekappa/kcms-go/spi/kms"
	gomock "github.com/golang/mock/gomock"
	vc "github.com/trustbloc/vcs/pkg/doc/vc"
	verifiable "github.com/trustbloc/vcs/pkg/doc/verifiable"
)

// MockVCSKeyCertManager is a mock of VCSKeyCertManager interface.
type MockVCSKeyCertManager struct {
	ctrl     *gomock.Controller
	recorder *MockVCSKeyCertManagerMockRecorder
}

// MockVCSKeyCertManagerMockRecorder is the mock recorder for MockVCSKeyCertManager.
type MockVCSKeyCertManagerMockRecorder struct {
	mock *MockVCSKeyCertManager
}

// NewMockVCSKeyCertManager creates a new mock instance.
func NewMockVCSKeyCertManager(ctrl *gomock.Controller) *MockVCSKeyCertManager {
	mock := &MockVCSKeyCertManager{ctrl: ctrl}
	mock.recorder = &MockVCSKeyCertManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVCSKeyCertManager) EXPECT() *MockVCSKeyCertManagerMockRecorder {
	return m.recorder
}

// CreateCryptoKey mocks base method.
func (m *MockVCSKeyCertManager) CreateCryptoKey(keyType kms.KeyType) (string, interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCryptoKey", keyType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCryptoKey indicates an expected call of CreateCryptoKey.
func (mr *MockVCSKeyCertManagerMockRecorder) CreateCryptoKey(keyType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCryptoKey", reflect.TypeOf((*MockVCSKeyCertManager)(nil).CreateCryptoKey), keyType)
}

// CreateJWKKey mocks base method.
func (m *MockVCSKeyCertManager) CreateJWKKey(keyType kms.KeyType) (string, *jwk.JWK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJWKKey", keyType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*jwk.JWK)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateJWKKey indicates an expected call of CreateJWKKey.
func (mr *MockVCSKeyCertManagerMockRecorder) CreateJWKKey(keyType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJWKKey", reflect.TypeOf((*MockVCSKeyCertManager)(nil).CreateJWKKey), keyType)
}

// CreateX509Certificate mocks base method.
func (m *MockVCSKeyCertManager) CreateX509Certificate(template *x509.Certificate, key *jwk.JWK) (*x509.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateX509Certificate", template, key)
	ret0, _ := ret[0].(*x509.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateX509Certificate indicates an expected call of CreateX509Certificate.
func (mr *MockVCSKeyCertManagerMockRecorder) CreateX509Certificate(template, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateX509Certificate", reflect.TypeOf((*MockVCSKeyCertManager)(nil).CreateX509Certificate), template, key)
}

// GetX509Certificates mocks base method.
func (m *MockVCSKeyCertManager) GetX509Certificates(chainID string) ([]*x509.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetX509Certificates", chainID)
	ret0, _ := ret[0].([]*x509.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetX509Certificates indicates an expected call of GetX509Certificates.
func (mr *MockVCSKeyCertManagerMockRecorder) GetX509Certificates(chainID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetX509Certificates", reflect.TypeOf((*MockVCSKeyCertManager)(nil).GetX509Certificates), chainID)
}

// NewVCSigner mocks base method.
func (m *MockVCSKeyCertManager) NewVCSigner(creator string, signatureType verifiable.SignatureType) (vc.SignerAlgorithm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewVCSigner", creator, signatureType)
	ret0, _ := ret[0].(vc.SignerAlgorithm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewVCSigner indicates an expected call of NewVCSigner.
func (mr *MockVCSKeyCertManagerMockRecorder) NewVCSigner(creator, signatureType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewVCSigner", reflect.TypeOf((*MockVCSKeyCertManager)(nil).NewVCSigner), creator, signatureType)
}

// SupportedKeyTypes mocks base method.
func (m *MockVCSKeyCertManager) SupportedKeyTypes() []kms.KeyType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportedKeyTypes")
	ret0, _ := ret[0].([]kms.KeyType)
	return ret0
}

// SupportedKeyTypes indicates an expected call of SupportedKeyTypes.
func (mr *MockVCSKeyCertManagerMockRecorder) SupportedKeyTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportedKeyTypes", reflect.TypeOf((*MockVCSKeyCertManager)(nil).SupportedKeyTypes))
}
