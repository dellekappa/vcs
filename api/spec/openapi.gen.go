// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
