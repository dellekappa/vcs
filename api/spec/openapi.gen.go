// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/Vf9x0/vP/1XAAAA//+4YYw9XUMBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
