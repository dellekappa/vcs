// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
