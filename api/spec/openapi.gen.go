// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//rgb57Q34AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
