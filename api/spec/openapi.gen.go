// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x963IbN9bgq6C4WxW7lqTsXGa+aP+sRrInTJxInyTbNRW7WFA3SMJqNjoAWjTH5a19",
	"jX29fZItHFwa6EbfdHH8zehHKha7G5eDcw7O/XyaJGxbsJzkUkwOP01EsiFbDP88ShIixCW7Jvk5EQXL",
	"BVE/p0QknBaSsnxyOPmVpSRDK8aRfh3B+8h+MJ9MJwVnBeGSEhgVw2tLqV5rDne5IUi/geANRIUoSYqu",
	"9kiqR6XcME7/idXrSBB+Q7iaQu4LMjmcCMlpvp58nk6CF5cpkZhmojnd+Yv/fL04f3GCdhuSo+hHqMAc",
	"b4kkHFGBSkFSJBni5I+SCAnLw3lCEFshjBLCJaY5OuYkJbmkOENqZQgLlJIVzUmKaI4uSALL/2H+fP58",
	"jhYS/fr64hL9dnqJroiegckN4TsqCDymAuEcYc7xXs3Drj6QRIppy7B/Ve/8fv7y+MfvfvzLewUdKskW",
	"Nv/fOVlNDifzg4Rttyyf7/E2+28HFQIcmNM/OPIhcWKg99nBGZai/k6WOcuTCFpcwEmghOUKIOqfGMGr",
	"Cnh2l5KhhBMsCcKo4ExtbYUKJgQRQu2ErdA12aMtloQrWMIhGcjrIRMH6CgWmOUtyceCciKWNIJxi1yS",
	"NeEoJTmDURWeZXRFJN0SBVdBEpanQq1GPTJjevNRPYKasGuiy+5xfayPD87JihOx6SId84oeZYp2G5ps",
	"UIJzH+TsCnA0J7tgThGFoEhYETne07PLxelvR6+miK4QhSNIFLIz2Ap8ZA+qIt4koySX/7NC7imy9Bed",
	"G5a11D/HNgukZaDnM4vIYAC9P0rKSTo5/D3kQcFE76cTSWWmvo2xPzewpsHJdPJxJvFaqEEZTZPvEzp5",
	"/3k6OUquX3DOeDvfPEquEW9lkkR93PwIxkTeb/1b1SMF27q+zXbO9WmO3UhFoPBnnRPFmU9SmNkWkmyb",
	"bKe2Q3+K+j71modvM5g4stXgefNmu17SNA6hRRzF4XSWwev1r8mAM59OAPP5UpPiipII8pzCP3CmqYSj",
	"6t045UssSxHfzQU8G0JnABE32Pv6SXyeTqq78pjlK7ouOVw64qIsCsYliQE0N3cgkhssDWyuiECiIAld",
	"0cQxVf8iVq/WfltoSAg9lfBv8wgqZ5huIwB5yTjaCrbcpixBOE/RTfI/RDr7sJPoJkEsz/ZzdKqXG1yH",
	"GRVSrTPHW3Jwg7OSoAJTLhTbJpwggpMNPKxOSqgrTy0D4StW6u2IUo/NVivCtSQQ7nKOFLPUE5irAOfA",
	"g5Eok40F5ZNcM+sUS4yE5GUiS07E0yliPBA/vI98FKhOtCLIJYgn1CL2YPGjWvxJNQCMvC8kW3NcbGiy",
	"vKJ5SvP1ckvkhqViKTowxi4+wYIgQXJBJb0hSOOt0MhhwLxHG7arYwoV6IqVeWqvuIp4LKq9yNPZa0E4",
	"2m2YFWKIqJ+FL401L7y6dBVsV5RUknvcJVzJ/gxIz6Bfw5wgNxXI94332w9g3DZTKooM76N03hR6PeJg",
	"AVVpWJvBUEW79oCq3VQIChur5PYM5+sSr0lMaO5DVLOJ2P5YEhdiAs7heIURne05WZG0plPUpf/fFxen",
	"8+f/8ez5d7Mf3kcZ+orxLY5d4Ojni9PfDJI0ptVfaRhS4YFuiuiczKfow04ub5LlB6EEdo6ytFjeJHN0",
	"QgoC2IFY7g8EfGgKv9SPb1Vy4EokI1sFZb09uxCtSOUpesLMRZbtnyrlTNKkzDDXjFEYNHWw+vXoH3YG",
	"+JrmeiFKv9BMFKidOcQJv49CkvE0dsE68tPCrmLTwL5hy4asFNOHNW4to4bB1L/2SGxYmaWKQZvFVLLz",
	"W5xlRI6jK1CpQKwVraeOu1nGVBMaJwUnQkEkX6Nq2CF36hwtVohtqZQk1ceekhUuM4MJirF+2I3cWItS",
	"0o3IWinRk5p1U9ElDGieR0WAY92IcZPIOJVHRAJD5ikRdJ1jGaA5GBOOPVILaX0jZSEODw7UVS05Tq4J",
	"n1MiV3PG1wcpSw42cpsdpByv5Ez9PmO4lJuZXsHsJpk9e94ruhlu4QnUvYKaJejq0p93it5aDgXJu8lH",
	"Dz/VxK8rnFyvubqDlwnLtHbUOICMJTgjLY/WrI+dv1LvfJ5OFNnGMZF8lB3TlzyL/P45BkO7zxYAtcJn",
	"YUTUn6iQjO9PsMRNlOt8vaLmBrN08u9Gv27Yg2HIXdpdVPHxiSuu/3gDtPCpGpcKL0Exjm+AdcYY97CM",
	"cJAX7gV0giVp1bQUjFqGsADvHiB2fSwGqWWS41xgsPRFYX5ZPY8DvVV71pqaWV3kaKKsoIZfzhIwnvBb",
	"DQyVhfl0cXLsc2xjYerES7ugJclBeA1VkR6hzhpKXlTfdghSLz1RKSCrKwIXUptxytzUfcv6+e3lGbxn",
	"MFt0SSDq+YCVDKWdGtJ0IMRYm0sT2OMwoMvNUEgg1BZ7aSguBKq5tiaK8kqo3eQy29etpzhQsMF+f0WQ",
	"4avaUB3wVZQziTiRJc9bcKDNehRRB7Bzi8TsG1pURDRPsjIlwsqZOLnO2S4j6RqYuU88bXbzFm4svoxt",
	"//jutn1YLr1PA391qGo2lpPT1eTw9yb9fKqbRd53MA4fqsEqVwFHaZz5fKgUF6y7hWxHmoQ7mWTT9tiw",
	"f/l6mKJsy56b2m6HKzFbR4D59gXC2Vr9xziVm+2I4Zv22TyJz0Dy5H5m+LC7HgIujATN1xlBRXmV0QRo",
	"BwuE0c9vf9EEd+s11FBGLWgKoNXb70QX78zvA3E6bL7dGKQ1+d2GgAGhx8pbSQIRMzHOU/Q3LJNNDHpg",
	"y2CF+uzy1UUMH5da2e+30kVNwWotCrt+P395/Ncfnv/lvb9Wh24CPVEIrmd6al/+j/eehctYDfr29SJP",
	"C0Zzqbg1yROWkvpnjHdAA+7Bn99e2iX8+H6kPJ4nXwheilz/JeBlNresKLYOrr8xlhGcG0uH9oiA1NBN",
	"HWZArRLiNKXGWeQTi4/8ziQcYzJooc/GmXgkt0a/jpm9qYCZ3RC+j8JRnY3aClkxTnyZB+SwgrMbmhJ/",
	"uGuyF03HCDKyanO5K5wJs1478tE/ULJhgjgwUmlnEo2pGFfynsdrr/ShNB1kMY7RQhjx8x/Inu/FNnPR",
	"4hL0QCqcZzBkjZU3sQXLP/VcS2YA83p01xfBK2O3dVrINp+ptgWqb0HuDeSvcJvD9tK3BbWUgbt48THZ",
	"4HxNgoCdY5aSAeo00d8CSy3lBgE/W3G2tR5iMBtG/KCU5HKJhVC/sZZIFE1LQJDW/C53THE/MUWCFJhj",
	"w3gxejf53+8mKNlgjhNJuHZYrigXErglFV74CMJSEoUMCql/fnupqVSL8B1vnrEz9XZck6htqCXk5EI7",
	"lw2L1D4vp+soSOkoGEmCNRRFpn6kwDxbY9jQkzfHF0/1xlme7b2ryTGld5OS54eUyNUhhKSJQzifQz3T",
	"zC1/ppZ/+GEnZ/ZJBYd3Ex1QlqewUlFpjWa921LIcDOlEjzRqUIw9O38GTqqRpv9DavtH+tPj6qv1MY0",
	"gLoAHjUZ6rEWJ4Chb44vtMqvNDCurVpxj0yxVGsaQHvuTY/+eono7sTYZtpwd9r2rmTZGvH4cNF/8qM5",
	"wx52B68Ng/c46+FCXWVYEoUj3x8vBvA8+0XDkuTstudtRsWBIaXHpZBsS/9JBNop4rqmeQoOHR1rZ4Se",
	"HQbzO0NregN2kzfHFy20gul2mUbN/OcGyLCzM05mFqCKKBXWvMzYbl5R0QXhNzQhCCdSKO3x9Ay+3GkR",
	"x2NVIhrWASshRgSOkS6mW2SfW/Hc7BfwV7vuPbuYdpJCxMkGC2M+quIG8UrqIBUFuVWZZXuEE7VloI3e",
	"2EXLZsyRL53l3rhpwuW/Pn/lG1oAF8ynip35+8LWHYsu8TURqOAkUXtKCGKKmZuJdyTLrnO2c3atKpQY",
	"RM4rpqi7Y5Eg6DYGw5yANdFInyAK584Satfs7ULtbEezzF3ECaBoy5s0d2anguQ0ndnXZva1w4ODLni7",
	"lQ6JCta4d7BhWUp4cFsCxppbqdp84rse1Xr73EqdsXUe/fsPuke0BseYJe9EgbNm/RWeXz9huaCwU4H0",
	"OEqut3bBSarALOmW9CzB+idbdwMv9PjbyLbIAONiXiTzMOJC0ERqbJG7Dc1ISKEJA8OztkFREVzdLt4X",
	"4obVwAVnKzUEFe5otUBVqjuxzCQtsnB6s7I4ya85zmWL/GY4UYJzpyIaQoCvjM9Ebjgr1xvn+bf0eqn+",
	"rl70+BWIgBoQ/tWdh3kMEGgUSH5wr0PQEXA5SQodLNGkbRsxYeTM6hJSQ/TKQ1ESNOGAYKGPmT8MsBQD",
	"YgX+oyRWejX6sA4lq/IhrqjWyZEor2bGa+LLkWrDlgvuqNy0zKd2COyBfJRIEInKAqUl12En5IayUniQ",
	"8uRWxYHpDQRI6q350Rv6DKdKZQeFxLhG1N/GKFC5eupirBEH7PYjINL6gIW4ly4CC5k3kztojgLJR9/V",
	"q4ztNOsoOJlhd5MvNZ4I61yKnrfzcsZR/9iGWLlbogrfMUIl+VgQJRYoYcGQn8bpgnDFn0AJUCw5RGLr",
	"RUInGkeBKOo5DL3pBG598FwMW5jvLGoSljr/SrwI16cvtnG2t1IQvixol+VtoDg2yEBX27w5e2yN1ljB",
	"gaOzxW8IZ0x9a2nKpl+Z9KQc3G8+PhnwqKVE7FPTib6RnUCSOomk3dS4yvBaeEql3YiSbXPkRSwguA/M",
	"wIrrVGFtEUOZVRdapPzb6gj9XuYhSkKbTwrCsJfePRsVNs1iWkQw714xnLlijwUWiowzcqOuIt8HUmPQ",
	"LDI4nDq6sI4QEEB/urw8Q39/cQm8Hv44JynlJJFzM61AWwio1b7t/zzXGOQJcZaxgyCvAKiQEyhNqNsW",
	"ZH+5IZSjLbtSpPvWaRzxGJePcaEkAItlv57WoomecU4yDRK6QjkhaYvH3ZJ0c6azkGI02P5OcqKNVqeX",
	"Z6jQcrKDbb9jLYoZ06Z23Iawt8H3N2c2QCzEUp+fVCH2L2kmCe8Nej7r/BjCWWIvLNIooy1KXjARD7fT",
	"10HzfF4Z/4+R3/xbQ4dJCt+FYQKDK70SEPInrXIo1ZtwF281IiAmel4G4F1ndWOmi52Wz506rA+eoSNC",
	"PIuTfptMdDjz8fvWvbXiotqJQkEvvjFqsah4rLnguozpbQk3F06dMvk+SqZaGUNlRFXozlHp1KNojj7s",
	"xBMNxKeIcfRBsDxLn+iRnhpVGZSRkcEgD6qjPriCeNwEM4L4wYgqoi1KPUylhj7G8RISWgTDhjLF+Oh3",
	"9vckG3WT5esYsDc4w/kaRHecpsSlDkE0VJvZAkdd4Jcboi5Xp47rIbzIeiT2QpItgpAmsPWYm7LHPFJ5",
	"9IYFRFb+Kchr2eLY7XkCv4/Yt+aI+hL/FdwGcRC8Pl9YCDQ/qaJg4hDS/iSSfvvDD89/9MNo2AqdLE7Q",
	"EyNQgOyujRIni5OnfdBsx0+LZANR1IV3Nlh/spMdlQvoys/IIH+UOBMo2ck5uqDrXKkeby+VkuqC8NSe",
	"q0C8lqCk0TN+8Gb8efyMkDZUjJ1UfzVHr2h+TVIE0e0AxJ7p8zLL8JU6NAhMaF4P1VTtS5rr+NGLSNye",
	"nlp9PkfHJec6hFQ2nXvVi4pcvvmwk9/0C5Le4ryr2uHP0ECsVyYhoh7DJJeSfJQt+Q20x6IEMpjL6MJA",
	"strs7+kmSikwcbQQi8nWLBKJpemxHxxqUR4cYFvDsirAqXlm7TWiTVwB3VohkZek66s/zuKjLYIlzVJj",
	"vWacxO0l6Mn5y+O//PX7H59qhVOzHvjImP60sqdtL9ZDAzp/OB5YJOdtPnoaF7nNU0ESTuIH3bAntVty",
	"bhlCHs7g+4Tr67NzeWdcP7iBLPaMkwJzAo4qxSuOWmTqNpnVfI+0pwu4TWjIG+87fDjnbIdLvNde+KYK",
	"3lBStjYnvJsovf/dpNuwd0/oEHPTDzq++0GFfhvRAFxoDVsOkKHdoaq5wjeixhdCBmA/H1AFiVcY3iXt",
	"1YkLdHSxIekyOtz4DZwdnXcvu83+E6Q2QYaBsfUQVBYJ2zZNwbwr9Lph6VxlbDeKFvV9ZpXk9GXGdqCV",
	"dGrb7hymbZgQMQoNw9eRyN+hA0cQfUDeFS5TSvJELzMuw79TL72bGNu8cdukzkZo/DnR80pjSHGiMUFX",
	"OjJeSc8GULnpoHzDqMT42+dzbTDQS0vi0U/w1PgFR0HAmbCWd8twO7fj9KW6DaLEOA3/yRlqH5fOHCGA",
	"0nzMrJ1QhM4q0rgtTZ0TUWZyNGW157N9RelhD5EEVVFbg4rjLm6aJsu2wbT4HZT50HlQEZKSPFJ65PL8",
	"9Qulc3oRSiaJb08kwjeYggJpoWesmadntiahjhcA24H1i1VxWJLpD1A9SRHRXEiC01qqs/PaPjkhK8J5",
	"eLLq1no6INY88XHaAcQHo4VGFz0YtB5OFd1+hhDJV5RkqRgpRnpL7ZhrsEX+rBSbmIw9RD8oxaYmBZqP",
	"u67Mr0kzaAuWbSuo6WNKD9yGYgyImuPFcfhssAjelTRq8oLzcnsFzngs6xUTXPKoub6sUv/6fOHnk0J+",
	"XsFMRRWTRKpjvP0vqlRUgQyPTqlQqq+XoRYNGr8qpWYxcl/QBGfZXsdPZljNmEFBGS7REzJfz6foisgd",
	"ITn6ATy9f3n2zC70aVu5SS3fR40+9U2AJK6grQO/YpHuLgiSKcnDcEgAmXDpjbNSQBFLwonJJ9bwFQVJ",
	"AIqBq7kZvBMPTuk1IflbDYp41vC7DTGHmtzOyZoKSTioWDrUvadMZBV37wKd1BAm/lHXBhxdRvJCp5Ie",
	"XRwvFmYMcOlr6Ny2UOFP5RbnM05wCjejHh0Cubz3LD7rWZ3JPiVX5Xodn7yvoGUvUO9wOq1Mv/tc2gtT",
	"aMtW3D1XA6BJCIcSUiwIdtMKjWFJlYOF5OkMTIQmYi4ghq6I3SiFvz5/ZZcAAUc7coUKvCZGj49n4Pbo",
	"L2A0TWSXXmBr1QUlp3Z4L7S+D9+jgrAiIxbxqYKWi/fT0089nki2mGYIpymHknzj4r6qiNKuVVfoEMaS",
	"hsk1itFlGdu5CFcXi2PzfMRhJMJziuKJPzCVzvaJhAyO2+aH3bVoy8b5Rugb8S25Qr+QPbogEqUsKUFP",
	"MPXcTKVhvxJfYj+ufG3xepFq7l4ctJeCdbEk0aU9+fntL0+DBd5maWHRqN6lGRHBXFrqMgOPhquZ2E4P",
	"Bctosh82AZiGhI6Q3YScouD0Bid7pIerzqZWHdWWtUxJkbE9vMH4GudV3GSW6RqLpSBiijgBiE1BXlAi",
	"ScYEEaggXEBcDQRWxnUqHUCmNtZFNZYY7Ps6pH/heEANgsgFWIJiBiTlkvqbZOOR4jhaCGzRw6g+iKtt",
	"En6CcwhcNb+2WHAjzGA8IbdE2MbqsYsCJ2RW5WLarHqvUl77Vhr1WvpLibOV3GEejyc5QmVO/yiDwqoG",
	"+0F8Ra9fL06eIiyEdjEHJcVRSm5Ipu5ZxDiy82jiFhvCXcxgKDwZuANNhVVRDW7ZgfR9m+5zvDVXCjei",
	"Qov9z231hnARFZaOkHkU2XCI9tUy3Juwl3c+QFu8Mrqwud0o2O9NsdZ49LIOj7Opq7F8Trc4ba/owt2c",
	"5WSKAl/eUsn+9d+usKDJHP3GcuIyCtQshjfrlwV6koNWg3BRiKkNJFV/PPXK3OdMog2+gYRgTqRwcd+H",
	"0UnjMBN3ZsiS8C0YN4XJuHMsuXa2NQ6tcx84TmQJZh8dxio2tHDaWyDomUIIwWjhC2BgEmF7i/AK7Y5p",
	"6ZCJ7yRW9+bDgtO9IjOFftjFF9u8lboU3uMIj6Ya99TbcwMstVkymvZ1qdR3LA0i+hJfRdw7LJouA7+y",
	"1FepGlQxAlHg6cdGl3eZ6n7kOmR1VfmedpFhvjyLsZTeVXVm4rUeif5W2030AOrSeAaNLMzPiovoR51H",
	"9ag2PapNj2rTo9r0qDY9qk2PatOj2vSoNv3bq02Bv70Z0RpoEZ14FkpQ73sUstGOjiHhPwNKcFYpdY/l",
	"XGNJdrEiqsOAP9BbfiEZv1XtNyEZH134jaXxaOLOUOMvF2XpRSvAUj2gd8PpjsAeUdvrNmDvqLLVt71x",
	"YaGvixRLUk/2akWmztedo153EtNZ4eoDtfs3x611IqsgpWgW691z10x2z4pmpGUG8/RNJYP0puOY0Rrf",
	"TsP9RFbv4Wg3+Aee4RucUTXMWYUPJB3IE270t6bYSqNkhLo1C5rPHwtCPhaE/OoLQkYsO9EyD6iG5SML",
	"RUDDP0MUfVyiuSCP+Hvp9u703x9Ed1sG8Nhs+4s0224v6nVawIVK2lOzoh3grOWidtjmgzHmk5Y8gaD0",
	"T9pfIaUS4NwaGpkw/Rg+lFQIp6u919VsQ6A1cjRqX78cDcr29KEVplnJCUrUUMjgdKxqAEmuYxUD1Few",
	"z/YYvLam0FsihOlceav8+jfeO+2suq7iwkbsyqIT+SfXAfDB4dn1QfrqjHgn5q+uS/L8syqCDKyUUYeA",
	"XyqjJd6/4xDGlatpm7uzkMZNnXYeuo7GPRWm+NwOtSG1HToBN+Q6dhwmyAYRfXisqGp4s/UuouzKtmjd",
	"0EiQ+FkbQzhwUAnvvwwP7uSbDepsg8kdQNvHJgOwdiPYKDblr8ExqrBCWFQurxbzYAy3KaBXS+o8ktuw",
	"zBgchjBNf1Wj2SY8+gr4Zmzzd4DfWN45ArdvxTzbyLWffUZ3NRgyb0mW/ZKzXX5akHxxEnTljSGXegnp",
	"t7oSTQdWJ/DqpZ+efSN8g0Bgz3jRGc9TpTHj5HrYbPVM1c6AIc+L0tVjyusy29poqtrg38FDfrlvuHsp",
	"1NR3ra9HdusODAR64Thn+X7LSrHUjuLePdiSrMag01JW1vq3cK1cLATd4WjtWp1rJjeslEr3tuFt2kJl",
	"C1Tb1knxyrK+G3kEYp1oB7K1Kp37zuhO5AoDEu7v+INx7xEDtM57f+v83dQYeh8NTaDCmhpvt9rQeTmG",
	"P2ic6zy6htMIfKOrjO3uiQJs3XkXCLOzafG2OjHU46a6D8H3x4vhiN5Z+8Ov8RECsANfI6jRxtkGgm48",
	"u2nn1Z6s1HUjjW4NXRtMF5PpueT6v6nn8uoSz9GFavsBFsQEArw5vtAkA6m9i5OzP/nyvMIy2fiVQAbN",
	"16iw9o1ob3TosnRfabNpKbQzYyNlIRCIQdouDP3xjFtHYcwUFVjdJXmK/igJ33uG3UqO8usztnUHTBnR",
	"dRcMKsJr7ev9U4QMb4KgP0mNl1clic8CpBnmvgxwVFSdUpXcHtp1XbO/WpiMqZabiAgqOLdPR99Uz/xu",
	"8IIFESHCu4lyvCUHXr28qakCSHCy0XHrkPXdjF4zS6vcXY3aMHZD6by7sO/tyeHLE0IPVlXw6RQPbtn6",
	"0x2w7k8e1rz15/a9M3nTdemcOFaoNGzU68Ch2xRwdeTV9Wzmb3IDe9uGfTnjwqW/Yn2HRL3QsePuywC5",
	"U6mlYe2OgYh1aZd7YeixOjH3hMrTh2LqnWuO1wMTRYYjxXuOYv47j//U2ZYZCFV3ufYwNhcOXXyc5zHD",
	"+bo0Br9B9gLP7G7W3p068ZWrrDmTzpZye1z9zRvlq0fS+GIHRCA86vOP+vxXrc/rDIGlzbNszYWwnb8w",
	"Eq7at6HWn99eVky1SVAuhdMrmIyFac8xIBD/nm0M7dHXdzqzrjQAUW85T0UjI+Ckor13k5zlpuLuLQqi",
	"DVKGx+jkanCar5gOBoacQqgytMU0mxxONiTL2P+SvBTyKmPJPCU3k+lEJ7ROLtXPf8tYgiTBW7UjaIw0",
	"AYZ+eHAQftZQaqrPQQs3HNnTDZxyohi/b+Q38WpvvztGb45nR2cLv2OWhsz3b6A6rWQJ85uTHFhrux9t",
	"pr+r+lZlNCHGF2F2elTgZENm386fNTa52+3mGB7PGV8fmG/FwavF8YvfLl6ob+byo/Yc+I4CCukRHkXZ",
	"Tq4QJagDL3Sw6uTZXE0M0QQkxwWdHE6+mz+DtaiLEVDowOzPcyofVA3aC9Ye7St8kFcxvEpswrbHz+SM",
	"CVmtVbi27CaM628s3VsMIpqqvaDIgw9CC9VaZuqTqLqDZj9//uzdG7C7b589GzV5TcH83MDM01+A6ES5",
	"3WK+74NUk6am7jjWnJWFOPgE/1+cfI6cz8En/f/FyWe1uHUsNfucSE7JjQlLHXBefyfR4yq8wvi/tzTT",
	"/LtaqikBS9XvCscqojc7mfgWUd1xoQHgynnYvHf0juNTiOrp8Dnef3GkGHAoXajhMSBxYLqMVuKljr21",
	"Ma5x+rU9t6O9Eus5CK5WdxNZBvRKfwg67532Hkj9lvObG3QIFtzuEMbgRqHrtc5AqJopaQuw5J8zr/h7",
	"HEFMpVcrREUbG/iSm9fEKyjvHrkP9Mgt5fofAlsGdQp4YIwZVrF9CNYMbTtxKzwJoh5brn6TBuyC7z32",
	"5dqie2HaYbNo0w/aeFrCVpRtqBKU335IBKnm+ULYUK+jPOr8g6Lkg0+6FJvaTdHLCxonbpKK/c4NUIsD",
	"RJ2gw6s2OQTo6cXg1U67pWTwQx16T4XidhToO6DWus9jDkpIxsfd6ZD2J+56o/flRj7EUXTP+cC02JMt",
	"OYQkbwP5MbhgMnHILLQi9uCDTY0Qrek7pZevFGLBgASkh0CE3mkfGBf6s0mGoMNwwPcggQlLEQefXFbp",
	"Z/0s9a5q0aX7lbxpfIMbd0MVh9k3j7562b77k351ckfAjzSceSHuzlRoekFc7U0zcQOWW3hcanvTGeQN",
	"69kQTU5LOT0gjgS0dCrUtudkm57rZxmPUHT7cOtTmLEc2hzgQ2A3A0wB1Qbm97mDac90ZuHdc1b52KNs",
	"BHEuu6h3Lm4xgdXagT6UVBPrivun2L1gISgZKqQOQ8fgVrQxbTNG0+QRL1uEds8vKJkLaAQ5fhG1mPvW",
	"bQphbrZJRZhdI6rB3Levz195dYRsRq0/r1oOxFL6kpHftb9JPbbUR5N5PxQN1VvufxHZo63R/yBi8481",
	"dhf1UF8n0c13JMtm1znb5QesIDn1hY9ZFV7jRJCCk0R3rtbYGxdK7FDggWqe+ik8Ds/c+qsmD3gMA+JM",
	"x8gFSmdenJxFAku/HrFg2jZNxZDumWkp1FNc+6AWWNmuzMA5iEAqpDmytm8diVOrIqB9qRHMomlyVJv3",
	"YRjJUXLdyTy+j1gTrpUY+v09IvRRch02QImgL7xQw2DA2CacmhXEqsO0mk6rQtIW2GygZMuMmrOAsnC6",
	"/qQrjFiPzvEjcSPH7FbUQ1i9LW6BACCCqKKAepfaO1DcZaxIdNu8fim5O8x5hFzCIEoJr7WdVKqq83jb",
	"KA8BC8zb2zlNTZlH82WK8FqJChJlWHZsiKVkWWUv3nFXpvQOrHmHq7oheo96Z26yYUuq6vCNPNNoMR9b",
	"qVV7/0pB+AyvTSXsoLCuX9LVGVoLTm4oK0W2R0RIrKtzpiaWtm1KU+jbq+QTVPEsOAP6YlznNmzxtX29",
	"tYdWnCKqmrXjgaXjmFzIPayoZ0JdqHUcguSIFfiP0tagCsqTu4rkW0x1FCGUIAkKR1rHBs5TlOAsu8LJ",
	"tRaRo6B3rTVlVRXd1H01p2sg7SGCGjLEBj1BFbx48dPp61cnTsQ2Sds3ptR3wpkQM0FltdoV42uijRFR",
	"QLpKK4MB+SJXRJJWwbXtIeAJy2/IXpgwbv2bV+vcu9TV3yb5aodNZVB2pU5ijn4tM0mLrHUST+XQ1LBX",
	"6ARy5DL0QrkjDA6M5pDfo7aytVPV9PoY6OL1jkaBUgcQfSNQlZabk0TaULnX56/0+Zu/oSy9jYFNqUjY",
	"DYS2GioGXicJ39KceAD9RoGowFc0oxDUrPDXle+do/MXx6e//vrit5MXJwoSLi7TL3XZSYs21UzLsrek",
	"SbCMbsChVGHCr0f/gO0qcqy6+1na0zhSSLql/ySOkr4RiHwsCIc+v/ewO6j6tdGpeaPCVYDxmpwFvy2v",
	"ixs3x2YrS5OP0pa4rqnnhM/RkRnKVeoPSmRV5foLLISuTWX6/xrdHvREv/+iu/ErI0EFeRPJyev+fr8c",
	"l5oJPjEj6KJNZpkBI2vu5rKaFyrLSXwNBgim2D8rbTVeWwnKNt1dl1hJhUQvgHG6prl6bPZCTWsNPkUJ",
	"K7NUcQWlHEipOHXL+fqLv9URezHZsOiqXYEOOcRBlWq1jXod7tj10VHzr6fgH01nOjBe/zyzfAJfZcSU",
	"/ns3sVlgRChp18qV7ybN3B7HMqEg2k+Xl2cX6Arq+70+fxVv+PnOa40BlQU7mpe68HqccYLTvS5AbSop",
	"Vq1eAFGrCt62TQXVJdW5CauqfaewQr/5//7P/xWoMmegjFWlHzol7aUG5WRMGNl3z77tUOI+zna73WzF",
	"+HZW8ozouzTU6uL1duNV9GICiK7fT3Liaml2Y1nka9CITF8UaB+b7RFeAVoAahuHjBKYqKRra+HjVFyr",
	"azQj+Lqljn28dJ0rCkhXBoXgxQAhlUxvknYtcnpR1k1ZFfZGPuLEpo6NaLJfr9Rj6zT2mcNfsjJPowp1",
	"T6hORK0eEpRzz+aRB4+48SNfvoh1NVKaSs0XDLiTUaeHw4V+q1/N/Np9rjQtxhte6wnvnX7fYSZWePrm",
	"2y9oVL29OTXYkY1DCrKxb2tRTf9FLKq3wqpOc/49G++/KKY9mu8fFNkKzNvvJNcULk9tGHG8Bbw2g2R7",
	"Wyi7IRwqTXVNpKi31q8aBoHA7en/WDT7xtsm8Z4KacdrTNxtVo42fx8XFzVa/BtYVblhlPkXN8iMKR7e",
	"amSPtNgLDNKHX4fpvGeZrU2JbmES72zq8e9r4XCGiK/ZutHZSS5OFf/CboruvPFo1Gy3JzBeUT0O1x6P",
	"xlCt+NFlEW/CsImmgX9lxuTWanYtdWn+y/kCuk0mdSd50ActvGZjhpWmTeD5vWaANMS49iCJY91mWsdn",
	"/BApN6sv2d+YREe6Jye8+vy71jaB6EUuqdyjS8bQK8zXBD749scIM2EM/YrzvYW7iBke9H5uY2Iy5jRf",
	"lm9kYqkX4rB6MJmXpkswUkXsXSempkNVgc/Yt7wqC2DnKzTXcyzNmYUrcffNmR5sDEu+kO5Kjis1UC2Q",
	"cdt+MNqIoWjbnl1RtWyWQ2PqLeOg19kiAH7JYNFSfLmfpCJZTRelYh9qlT/EHr/UZdXrue5GYBLl1ZY2",
	"zbFWWWO+dMxZud4oPbuOoTeFj6H25mkPLVIUYN8C6G9wnma6L6Gt4FjFnCr+6uep6quRqbuoJIiVJo3V",
	"hTS1ZCgqbfDcLq1H+/e6vFXJsl46UFsYyt2MAdah1eX0v32q/HfPotzNACTCozxgdfAjRxad1m6/Wy6c",
	"n65FD9oBVvo/J2JjHlvnkTOJ11VjfTK+526DhdF0lTIGTg9RwpSrMmtB7jiGAC0/HJvsUHmtP2VqHSqV",
	"VxKcbR7DtEVQWn1ECm/KLFN8xyJKVCMdomIAsJt+mDvNu3Tl0GP6Ot8Xkq05Lja2+zDOU7YNmtF6Op9l",
	"3aRdu7DSrkYwT6zvXW1V022w/tHszN2ijQxqdRaghf0CWNyQ5Xfrkw2Uexd80HDlmSsu7TGOmC69lNtC",
	"VxZE2uSQ6D4yvWtvb97WDhPb6gyWy137dG11cOpK/+w1ydjDgvfDr+l7iglWbAzYUl+egQtGrhUXxSmq",
	"XHcNNh8Unuvm9Z3OCtsi/DG9p3HHasCIoKM6zr2iZ4bVO6b+5viilcHGpBo9gbbiP5AbONq+usMf/Pxh",
	"Zx6o+z17yFX0xur3UJ4d0iCCO744BdorM8ysq9eHqBqsxLVDaHPyqBs+6oZ9uuHVvlL9/KS/MDVR272C",
	"Pj1wDceVRa8JTjtGf5IfoYRahunWUyFDNLZVuRbel1Bl5wEy32Elfua7XwSstFUXb1Furg/MayJNjc1K",
	"uTFmd6N2N7rpxroNdV/GJ2DzrurAxO9FdSbjHc/ugMdnsOsuWv2yxIk12Tso+oUGHkyoeFObDd18AbGi",
	"male7+X3UKnq0d6TD13go61P4aC6HvXOlQO40MPntf/7IqvLmKZp4vHsL5EV/ubsS2BrbcpRyPrF79th",
	"mO7Pcg8M+U9B8T+DHfvC3IPy40Zryy/CkaOtD0fw5CIETwxX1Weg72oMq0oxHx4cZCzB2YYJefgfz/76",
	"bKIOxAxRxwlttp9p22CKtiwlWc19Ws8pmTQxy65r4DhuGxHzvvbYbwjO5AbZTrLmO/2r/vHz+8//PwAA",
	"//++DpyQ3fsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
