// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"yHaSNd/pX/WPn959+v8BAAD//1NUa6k4+AAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
