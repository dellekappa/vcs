// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
